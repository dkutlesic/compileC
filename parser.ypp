%{
    using namespace std;
    #include<iostream>
    #include<cstdlib>
    #include<string>
    #include<map>
    #include<vector>
    #include<set>

    #include "expressionvalue.hpp"

    extern int yylex();

    void yyerror(const string& err){
        cerr<<"Error: "<<err<<endl;
        exit(EXIT_FAILURE);
    }

    set<string> functions;

    int label = 0;
    string s;
    int tmpNext = 0;

    #define YYDEBUG 1

    string tmpReg(int tmpNext){
        return "tmp"+to_string(tmpNext);
    }  

    string labelStr(int label){
        return "L"+to_string(label);
    }   

%}

%union{
    int num;
    string* id;
    char* str;
    ExpressionValue* ev;
    Condition* c;
    Function* f;
    vector<ExpressionValue*> * vev;
    vector<string*>* vs;
}

%token <id> IF_TOKEN ELSE_TOKEN WHILE_TOKEN
%token <id> INC_TOKEN DEC_TOKEN
%token <id> EQUAL_TOKEN
%token <id> INT_TOKEN VOID_TOKEN RETURN_TOKEN MAIN_TOKEN
%token <num> NUM_TOKEN
%token <id> ID_TOKEN

%token IF_PRIOR
%token IF_ELSE_PRIOR

%right '='
%left '+' '-'
%left '*' '/'
%token UMINUS

%type <id> main definitions int_function
%type <ev> value expression apply_function
%type <id> instruction_array instruction assignment if_instruction if_else_instruction while_instruction
%type <c> condition
%type <f> function_header
%type <vev> apply_list
%type <vs> parameter_list

%%

program : definitions main {
    cout << *$1 << *$2;
    delete $1;
    delete $2;
};

definitions : int_function definitions {
    $$ = new string(*$1 + *$2);
    delete $1;
    delete $2;
        } | {
    $$ = new string("");
};

int_function : function_header '{' instruction_array RETURN_TOKEN expression ';' '}' {
  $$ = new string($1->code + *$3 + $5->code + "MOV " + $1->name + "_ret" + ", " + $5->result+'\n');  
};

function_header : INT_TOKEN ID_TOKEN '(' parameter_list ')' {
    functions.insert(*$2);
    int index = 0;
    string s = "";
    for(string* param : *$4){
        s = s + "MOV " + *param + ", " + *$2 + to_string(index) + "\n";
        index++;
    }
    $$ = new Function(*$2 + ":\n" + s , *$2);
        } | INT_TOKEN ID_TOKEN '(' ')' {
    functions.insert(*$2);
    $$ = new Function(*$2 + ":\n", *$2);
};

parameter_list : parameter_list ',' INT_TOKEN ID_TOKEN {
    $$->push_back($4);
        } | INT_TOKEN ID_TOKEN {
    $$ = new vector<string*>();
    $$->push_back($2);
};

main : VOID_TOKEN MAIN_TOKEN '(' ')' '{' instruction_array '}' {
    $$=$6;
};

instruction_array : instruction_array instruction {
    $$ = new string(*$1 + *$2);
    delete $1;
    delete $2;
        } | {
    $$ = new string("");
};

instruction : assignment ';' {
    $$ = $1;
        } | if_instruction %prec IF_PRIOR {
    $$ = $1;
        } | if_else_instruction %prec IF_ELSE_PRIOR {
    $$ = $1;
        } | while_instruction {
    $$ = $1;
        } | expression ';' {
    $$ = new string($1->code);
    delete $1;
};

assignment : ID_TOKEN '=' expression {
    $$ = new string($3->code + "MOV " + *$1 + ", " + $3->result + "\n");
    delete $1;
    delete $3;    
};

expression : value {
    $$ = $1;
        } | '-' expression %prec UMINUS {
    $$ = new ExpressionValue($2->code + "SUB "+ tmpReg(tmpNext) + ", 0, " + $2->result + "\n" , tmpReg(tmpNext));
    tmpNext++;        
        } | expression '+' expression {
    $$ = new ExpressionValue($1->code + $3->code + "ADD "+ tmpReg(tmpNext) + ", " + $1->result + ", " + $3->result + "\n" , tmpReg(tmpNext));
    tmpNext++;
        } | expression '-' expression {
    $$ = new ExpressionValue($1->code + $3->code + "SUB "+ tmpReg(tmpNext) + ", " + $1->result + ", " + $3->result + "\n" , tmpReg(tmpNext));
    tmpNext++;        
        } | expression '*' expression {
    $$ = new ExpressionValue($1->code + $3->code + "MUL "+ tmpReg(tmpNext) + ", " + $1->result + ", " + $3->result + "\n" , tmpReg(tmpNext));
    tmpNext++;        
        } | expression '/' expression {
    $$ = new ExpressionValue($1->code + $3->code + "DIV "+ tmpReg(tmpNext) + ", " + $1->result + ", " + $3->result + "\n" , tmpReg(tmpNext));
    tmpNext++;        
        } | '(' expression ')' {
    $$ = $2;
};

value : NUM_TOKEN {
    $$ = new ExpressionValue("", to_string($1));
    } | ID_TOKEN {
    $$ = new ExpressionValue("", *$1);
    free($1);
    } | apply_function {
    $$ = $1;
};

if_instruction : IF_TOKEN '(' condition ')' '{' instruction_array '}' {
    $$ = new string($3->code + $3->instruction + " " + labelStr(label) + "\n" + *$6 + labelStr(label) + ":\n");
    label++;
    delete $3;
    delete $6;
};

if_else_instruction : IF_TOKEN '(' condition ')' '{' instruction_array '}' ELSE_TOKEN '{' instruction_array '}' {
    $$ = new string($3->code + $3->instruction + " " + labelStr(label) + "\n" + *$6 + "JMP " + labelStr(label+1) + "\n" + labelStr(label) + ":\n" + *$10 + labelStr(label+1) + ":\n");
    label+=2;
    delete $3;
    delete $6;
    delete $10;
};


while_instruction : WHILE_TOKEN '(' condition ')' '{' instruction_array '}' {
    $$ = new string(labelStr(label) +  ":\n" + $3->code + $3->instruction + " " + labelStr(label+1) + "\n" + *$6 + "JMP " + labelStr(label) + "\n" + labelStr(label+1) + ":\n");
    delete $3;
    delete $6;
};


condition : expression '<' expression {
    $$ =  new Condition($1->code + $3->code + "TST " + $1->result + ", " + $3->result + "\n", "JNLESS");
    delete $1;
    delete $3;
        } | expression '>' expression {
    $$ =  new Condition($1->code + $3->code + "TST " + $1->result + ", " + $3->result + "\n", "JNGRE");
    delete $1;
    delete $3;
        } | expression EQUAL_TOKEN expression {
    $$ =  new Condition($1->code + $3->code + "TST " + $1->result + ", " + $3->result + "\n", "JNEQ");
    delete $1;
    delete $3;
};

apply_function : ID_TOKEN '(' apply_list ')' {
    if(functions.find(*$1) == functions.end()){
        cout <<"Function " << *$1 << " is not defined." << endl;
        exit(EXIT_FAILURE);
    }
    string params = "";
    int index = 0;
    for(ExpressionValue* expvalue: *$3){
        params = params + expvalue->code;
        params = params + ("MOV " + *$1 + to_string(index) + ", " +expvalue->result+"\n");
        index++;
    }
    $$ = new ExpressionValue(params+ "CALL " + *$1 + "\n", *$1 + "_ret");
} | ID_TOKEN '(' ')' {
      if(functions.find(*$1) == functions.end()){
        cout <<"Function " << *$1 << " is not defined." << endl;
        exit(EXIT_FAILURE);
    }
    $$  = new ExpressionValue("CALL " + *$1 + "\n", *$1+"_ret");
};

apply_list : apply_list ',' expression {
    $$ = $1;
    $$->push_back($3);
        } | expression {
    $$ = new vector<ExpressionValue*>();
    $$->push_back($1); 
};

%%

int main(){
    //yydebug = 1;
    yyparse();
    return 0;
}